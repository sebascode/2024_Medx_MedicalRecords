name: "release"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      tag_version: ${{ steps.raw-version.outputs.result }}
      full_version: ${{ steps.set-version.outputs.result }}
    env:
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check Version
        run: |
          echo 'PACKAGE_VERSION<<EOF' >> $GITHUB_ENV
          cat ./package.json >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Set Raw Version
        id: raw-version
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: return "${{ fromJson(env.PACKAGE_VERSION).version }}"

      - name: Set Date
        run: |
          echo "RELEASE_DATE=$(date --rfc-3339=date)" >> ${GITHUB_ENV}

      - name: Print Version Complete
        uses: actions/github-script@v7
        id: set-version
        with:
          script: return "${{ fromJson(env.PACKAGE_VERSION).version }}.${{ env.RELEASE_DATE }}.${{github.run_number}}"
          result-encoding: string

      - name: Confirm Data
        run: echo "${{ steps.set-version.outputs.result }}"

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{steps.raw-version.outputs.result}}`,
              name: `v${{steps.set-version.outputs.result}}`,
              body: '*This release was generated automatically using GitHub Actions.*',
              draft: true,
              prerelease: false
            })
            return data.id

  verify-data:
    needs: create-release
    runs-on: ubuntu-20.04
    steps:
      - name: Verify Data
        id: check-variables
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
          tag_version: ${{ needs.create-release.outputs.tag_version }}
          full_version: ${{ needs.create-release.outputs.full_version }}
        run: |
          echo "release_id: v${{env.release_id}}";
          echo "tag_version: v${{env.tag_version}}";
          echo "full_version: v${{env.full_version}}";

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          #- platform: "macos-latest" # for Intel based macs.
          #args: "--target x86_64-apple-darwin"
          - platform: "windows-latest"
            args: ""
          #- platform: "windows-latest"
          #  args: "--target i686-pc-windows-msvc"
    environment: Release
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install apt dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install -y --no-install-recommends libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build the app
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.PK_RELEASE }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.PK_RELEASE_PASS }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
          tag_version: ${{ needs.create-release.outputs.tag_version }}
          full_version: ${{ needs.create-release.outputs.full_version }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false,
              tag_name: `v${{env.tag_version}}`,
              release_name: `v${{env.full_version}}`
            })

  publish-gist:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [publish-release]
    environment: Release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download latest file
        id: json_file
        uses: robinraju/release-downloader@v1.10
        with:
          latest: true
          fileName: "latest.json"

      - name: Read file content
        id: read_json
        run: |
          JSON_CONTENT=$(cat ${{ fromJson(steps.json_file.outputs.downloaded_files)[0] }})
          echo "json_content=$JSON_CONTENT" >> $GITHUB_ENV

      - name: Update gist
        uses: gorgbus/gist-actions@main
        env:
          GITHUB_TOKEN: ${{ secrets.GIST_SECRET }}
          GIST_ID: ${{ vars.GIST_ID }}
          GIST_FILENAME: ${{ vars.GIST_FILENAME }}
          JSON_CONTENT: ${{ env.json_content }}
        with:
          action: "update"
          gist_id: ${{ env.GIST_ID }}
          file_name: ${{ env.GIST_FILENAME }}
          content: ${{ env.JSON_CONTENT }}

  delete-release-on-fail:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri, publish-release]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - name: Delete release if build failed
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            })
