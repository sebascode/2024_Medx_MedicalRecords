name: Build Tauri App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    env:
      VERSION: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install

      - name: Install Tauri CLI
        run: pnpm add -g @tauri-apps/cli

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Rust toolchain
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install gdk-3.0 and libsoup-3.0 on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libsoup3.0 javascriptcoregtk-4.1

      - name: Install gdk-3.0 and libsoup-3.0 on macOS
        if: matrix.os == 'macos-latest'
        run: brew install gtk+3 libsoup

      - name: Build Tauri app
        run: pnpm tauri build

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: tauri-app-${{ runner.os }}
          path: src-tauri/target/release/bundle/

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r '.version' < package.json)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: med-ex-${{ env.VERSION }}
          release_name: "Release ${{ env.VERSION }}"
          body: |
            Release of version ${{ env.VERSION }}.
          draft: false
          prerelease: false

      - name: Upload Linux asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/*
          asset_name: tauri-app-linux.zip
          asset_content_type: application/zip

      - name: Upload macOS asset
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/*
          asset_name: tauri-app-macos.zip
          asset_content_type: application/zip

      - name: Upload Windows asset
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/*
          asset_name: tauri-app-windows.zip
          asset_content_type: application/zip
